// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/crdant/cf-route-resource/out"
)

type FakePAAS struct {
	LoginStub        func(api string, username string, password string, insecure bool) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		api      string
		username string
		password string
		insecure bool
	}
	loginReturns struct {
		result1 error
	}
	loginReturnsOnCall map[int]struct {
		result1 error
	}
	TargetStub        func(organization string, space string) error
	targetMutex       sync.RWMutex
	targetArgsForCall []struct {
		organization string
		space        string
	}
	targetReturns struct {
		result1 error
	}
	targetReturnsOnCall map[int]struct {
		result1 error
	}
	CreateRouteStub        func(space string, domain string, host string, path string, port int32, randomPort bool) error
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		space      string
		domain     string
		host       string
		path       string
		port       int32
		randomPort bool
	}
	createRouteReturns struct {
		result1 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 error
	}
	MapRouteStub        func(app string, domain string, host string, path string, port int32) error
	mapRouteMutex       sync.RWMutex
	mapRouteArgsForCall []struct {
		app    string
		domain string
		host   string
		path   string
		port   int32
	}
	mapRouteReturns struct {
		result1 error
	}
	mapRouteReturnsOnCall map[int]struct {
		result1 error
	}
	UnmapRouteStub        func(app string, domain string, host string, path string, port int32) error
	unmapRouteMutex       sync.RWMutex
	unmapRouteArgsForCall []struct {
		app    string
		domain string
		host   string
		path   string
		port   int32
	}
	unmapRouteReturns struct {
		result1 error
	}
	unmapRouteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePAAS) Login(api string, username string, password string, insecure bool) error {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		api      string
		username string
		password string
		insecure bool
	}{api, username, password, insecure})
	fake.recordInvocation("Login", []interface{}{api, username, password, insecure})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(api, username, password, insecure)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.loginReturns.result1
}

func (fake *FakePAAS) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakePAAS) LoginArgsForCall(i int) (string, string, string, bool) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].api, fake.loginArgsForCall[i].username, fake.loginArgsForCall[i].password, fake.loginArgsForCall[i].insecure
}

func (fake *FakePAAS) LoginReturns(result1 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) LoginReturnsOnCall(i int, result1 error) {
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) Target(organization string, space string) error {
	fake.targetMutex.Lock()
	ret, specificReturn := fake.targetReturnsOnCall[len(fake.targetArgsForCall)]
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct {
		organization string
		space        string
	}{organization, space})
	fake.recordInvocation("Target", []interface{}{organization, space})
	fake.targetMutex.Unlock()
	if fake.TargetStub != nil {
		return fake.TargetStub(organization, space)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.targetReturns.result1
}

func (fake *FakePAAS) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *FakePAAS) TargetArgsForCall(i int) (string, string) {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return fake.targetArgsForCall[i].organization, fake.targetArgsForCall[i].space
}

func (fake *FakePAAS) TargetReturns(result1 error) {
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) TargetReturnsOnCall(i int, result1 error) {
	fake.TargetStub = nil
	if fake.targetReturnsOnCall == nil {
		fake.targetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.targetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) CreateRoute(space string, domain string, host string, path string, port int32, randomPort bool) error {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		space      string
		domain     string
		host       string
		path       string
		port       int32
		randomPort bool
	}{space, domain, host, path, port, randomPort})
	fake.recordInvocation("CreateRoute", []interface{}{space, domain, host, path, port, randomPort})
	fake.createRouteMutex.Unlock()
	if fake.CreateRouteStub != nil {
		return fake.CreateRouteStub(space, domain, host, path, port, randomPort)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createRouteReturns.result1
}

func (fake *FakePAAS) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakePAAS) CreateRouteArgsForCall(i int) (string, string, string, string, int32, bool) {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return fake.createRouteArgsForCall[i].space, fake.createRouteArgsForCall[i].domain, fake.createRouteArgsForCall[i].host, fake.createRouteArgsForCall[i].path, fake.createRouteArgsForCall[i].port, fake.createRouteArgsForCall[i].randomPort
}

func (fake *FakePAAS) CreateRouteReturns(result1 error) {
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) CreateRouteReturnsOnCall(i int, result1 error) {
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) MapRoute(app string, domain string, host string, path string, port int32) error {
	fake.mapRouteMutex.Lock()
	ret, specificReturn := fake.mapRouteReturnsOnCall[len(fake.mapRouteArgsForCall)]
	fake.mapRouteArgsForCall = append(fake.mapRouteArgsForCall, struct {
		app    string
		domain string
		host   string
		path   string
		port   int32
	}{app, domain, host, path, port})
	fake.recordInvocation("MapRoute", []interface{}{app, domain, host, path, port})
	fake.mapRouteMutex.Unlock()
	if fake.MapRouteStub != nil {
		return fake.MapRouteStub(app, domain, host, path, port)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mapRouteReturns.result1
}

func (fake *FakePAAS) MapRouteCallCount() int {
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	return len(fake.mapRouteArgsForCall)
}

func (fake *FakePAAS) MapRouteArgsForCall(i int) (string, string, string, string, int32) {
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	return fake.mapRouteArgsForCall[i].app, fake.mapRouteArgsForCall[i].domain, fake.mapRouteArgsForCall[i].host, fake.mapRouteArgsForCall[i].path, fake.mapRouteArgsForCall[i].port
}

func (fake *FakePAAS) MapRouteReturns(result1 error) {
	fake.MapRouteStub = nil
	fake.mapRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) MapRouteReturnsOnCall(i int, result1 error) {
	fake.MapRouteStub = nil
	if fake.mapRouteReturnsOnCall == nil {
		fake.mapRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mapRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) UnmapRoute(app string, domain string, host string, path string, port int32) error {
	fake.unmapRouteMutex.Lock()
	ret, specificReturn := fake.unmapRouteReturnsOnCall[len(fake.unmapRouteArgsForCall)]
	fake.unmapRouteArgsForCall = append(fake.unmapRouteArgsForCall, struct {
		app    string
		domain string
		host   string
		path   string
		port   int32
	}{app, domain, host, path, port})
	fake.recordInvocation("UnmapRoute", []interface{}{app, domain, host, path, port})
	fake.unmapRouteMutex.Unlock()
	if fake.UnmapRouteStub != nil {
		return fake.UnmapRouteStub(app, domain, host, path, port)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmapRouteReturns.result1
}

func (fake *FakePAAS) UnmapRouteCallCount() int {
	fake.unmapRouteMutex.RLock()
	defer fake.unmapRouteMutex.RUnlock()
	return len(fake.unmapRouteArgsForCall)
}

func (fake *FakePAAS) UnmapRouteArgsForCall(i int) (string, string, string, string, int32) {
	fake.unmapRouteMutex.RLock()
	defer fake.unmapRouteMutex.RUnlock()
	return fake.unmapRouteArgsForCall[i].app, fake.unmapRouteArgsForCall[i].domain, fake.unmapRouteArgsForCall[i].host, fake.unmapRouteArgsForCall[i].path, fake.unmapRouteArgsForCall[i].port
}

func (fake *FakePAAS) UnmapRouteReturns(result1 error) {
	fake.UnmapRouteStub = nil
	fake.unmapRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) UnmapRouteReturnsOnCall(i int, result1 error) {
	fake.UnmapRouteStub = nil
	if fake.unmapRouteReturnsOnCall == nil {
		fake.unmapRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmapRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	fake.unmapRouteMutex.RLock()
	defer fake.unmapRouteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePAAS) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ out.PAAS = new(FakePAAS)
